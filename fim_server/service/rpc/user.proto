syntax = "proto3";
package user_rpc;
option go_package = "./user_rpc";


message Empty{}

message ID {
  uint64  id = 1;
}
message IdList {
  repeated uint64 id = 2;
}

message UserCreateRequest {
  string username = 1;
  string password = 2;
  int32 role = 3;
  string avatar = 4;
  string open_id = 5;
  string register_source = 6;
}
message UserCreateResponse {
  uint64 user_id = 1;
}

message ValidInfo {
  repeated string issue = 1;
  repeated string answer = 2;
}
message UserConfig{
  uint64 id = 1;
  string created_at = 2;
  string updated_at = 3;
  uint64 user_id = 4;
  string recall_message = 5;
  bool friend_online = 6;
  bool sound = 7;
  bool secure_link = 8;
  bool     save_password = 9;
  int32 search_user = 10;
  int32 valid = 11;
  ValidInfo valid_info = 12;
  bool online = 13;
  bool curtail_chat = 14;
  bool     curtail_add_user = 15;
  bool curtail_create_group = 16;
  bool     curtail_add_group = 17;
}
message Top {
  repeated uint64 group_id = 1;
}
message UserInfo {
  uint64 id = 1;
  string created_at = 2;
  string updated_at = 3;
  string username = 4;
  string password = 5;
  string sign = 6;
  string avatar = 7;
  string ip = 8;
  string  addr = 9;
  int32  role = 10;
  string  open_id = 11;
  string register_source = 12;
  UserConfig user_config_model = 13;
  Top top = 14;
}

message UserInfoResponse {
  int64 total = 1;
  UserInfo info = 2; // 用户和用户配置的json
  map<uint64, UserInfo> info_list = 3; // 用户列表信息
}
message UserOnlineListResponse{
  repeated uint64 user_id_list = 1;
}

service User {
  rpc UserCreate(UserCreateRequest) returns(UserCreateResponse);  // 创建用户
  rpc UserInfo(IdList) returns(UserInfoResponse);                     // 用户信息
  rpc UserOnlineList(Empty) returns(UserOnlineListResponse);      // 在线用户ID列表
}

message IsFriendRequest {
  uint32 user1 = 1;
  uint32 user2 = 2;
}
message FriendListResponse {
  repeated UserInfo friend_list = 1;
}

service Friend {
  rpc IsFriend(IsFriendRequest) returns(Empty);              // 是否是好友
  rpc FriendList(ID) returns(FriendListResponse);            // 好友列表
}


message CurtailResponse{
  string curtail_chat = 1;
  string curtail_add_user = 2;
  string curtail_create_group = 3;
  string curtail_add_group = 4;
}

service UserCurtail {
  rpc IsCurtail(ID) returns(CurtailResponse);                 // 限制建群
}
